/* vim: set syntax=B : */
/* Machine generated: {{ date }}
/* Model generator version: 4.9.0-SNAPSHOT */
/* Database information: */{% for it in info %}
/* {{ it.key }}: {{it.value}} */{% endfor %}

MACHINE data
DEFINITIONS
  "LibraryIO.def";
  "LibraryStrings.mch";
  XML_ELement_Type == struct(
                        recId: NATURAL1,
                        pId:NATURAL,
                        element:STRING,
                        attributes: STRING +-> STRING,
                        meta: STRING +-> STRING);
  EXTERNAL_FUNCTION_READ_XML == (STRING * STRING) --> seq(XML_ELement_Type);
  READ_XML(file, encoding) == {};
SETS
    TYPES={m,e};
    DAYS = {mon, tue, wed, thu, fri, sat, sun};
    SLOTS = {
        {% for it in [1,2,3,4,5,6,7,8] %}slot{{ it }}{% if not (loop .last) %},{% endif %}{% endfor %}};
    SEMESTERS = {
        {% for it in [1,2,3,4,5,6] %}sem{{ it }}{% if not (loop .last) %},{% endif %}{% endfor %}};
    ABSTRACT_UNITS = {
        {% for it in abstract_units %}au{{ it.id }}{% if not (loop .last) %},{% endif %}{% endfor %}};
    UNITS = {
        {% for it in units %}unit{{ it.id }}{% if not (loop .last) %},{% endif %}{% endfor %}};
    GROUPS = {
        {% for it in groups %}group{{ it.id }}{% if not (loop .last) %},{%
        endif %}{% endfor %}};
    SESSIONS = {
        {% for it in sessions %}session{{ it.id }}{% if not (loop.last) %},{% endif %}{% endfor %}};
    MODULES = {
        {% for it in modules %}mod{{ it.id }}{% if not (loop.last) %},{% endif %}{% endfor %}}
CONSTANTS
    abstract_units,
    abstract_unit_unit,
    courses,
    course_names,
    course_modules,
    course_module_combinations,
    sessions,
    groups,
    units,
    meta_data,
    modules,
    module_abstract_unit_semester,
    module_abstract_unit_type,
    course_module_combination_data
PROPERTIES
    meta_data = { {% for it in info %}
        ("{{it.key}}", "{{it.value}}"){% if not (loop.last) %},{% endif %}{% endfor %}
    }
    &
    modules : POW(MODULES * struct(idx:NATURAL1, name:STRING, key:STRING, title:STRING, pordnr:NATURAL, elective_units:NATURAL))
    &
    modules = { {% for module in modules %}
        (mod{{module.id}} |-> rec(idx:{{module.id}}, name:"{{module.title}}", key:"{{module.key}}", title:"{{module.title}}", pordnr:{{module.pordnr}}, bundled:{% if module.bundled %}TRUE{% else %}FALSE {% endif %}, elective_units:{{module.electiveUnits}})){% if not (loop.last) %},{% endif %}{% endfor %}
    }
    &
    courses : POW(STRING * struct(idx:NATURAL1, name:STRING, long_name:STRING, degree:STRING, credit_points:NATURAL \/ {-1}, po:NATURAL1, kzfa:STRING))
    &
    courses = { {% for course in courses %}
        ("{{course.key}}" |-> rec(idx: {{course.id}}, name: "{{course.key}}", long_name:"{{course.fullName}}", credit_points:{{course.creditPoints}}, degree:"{{course.degree}}", kzfa:"{{course.kzfa}}", po:{{course.po}})){% if not (loop.last) %},{% endif %}{% endfor %}
    }
    &
    course_names : POW(dom(courses))
    &
    course_names = dom(courses)
    &
    course_module_combination_data = READ_XML("{{short_name}}-data.xml", "UTF-8") &  course_module_combination_data : seq(XML_ELement_Type)
    &
    course_module_combinations : course_names --> POW(POW(MODULES))
    &
    course_module_combinations =
      LET helper BE
        helper = UNION(x, y).((x,y) : course_module_combination_data & y'pId /= 0 |
        LET
            attrs
        BE
            attrs = y'attributes
        IN
            LET
                mods
            BE
                mods = ran(STRING_SPLIT(attrs("value"), ","))
            IN
                {(attrs("course") |-> UNION(n).(n : mods | {STRING_TO_ENUM(n)}))}
            END
        END)
      IN
        %(x).(x : course_names | helper[{x}])
      END
    &
    sessions : POW(SESSIONS * struct(duration:INTEGER, rhythm:INTEGER, dow:DAYS, slot:SLOTS))
    &
    sessions = { {% for session in sessions %}
        (session{{session.id}}, rec(dow:{{session.day}}, slot:slot{{session .time}}, rhythm:{{session.rhythm}}, duration:{{session.duration}})){% if not (loop.last) %},{% endif %}{% endfor %}
    }
    &
    groups : POW(GROUPS * struct(half_semester:0..2, sessions:POW(SESSIONS)))
    &
    groups = { {% for group in groups %}
        (group{{group.id}}, rec(half_semester:{{group.halfSemester}},
                 sessions:{ {% for it in group.sessions %}session{{it.id}}{% if not (loop.last) %},{% endif %}{% endfor %} })){% if not (loop.last) %},{% endif %}{% endfor %}
    }
    &
    sessions = { {% for session in sessions %}
        (session{{session.id}}, rec(dow:{{session.day}}, slot:slot{{session .time}}, rhythm:{{session.rhythm}}, duration:{{session.duration}})){% if not (loop.last) %},{% endif %}{% endfor %}
    }
    &
    abstract_units : POW(ABSTRACT_UNITS * struct(idx:NATURAL, title:STRING, key:STRING))
    &
    abstract_units = { {% for au in abstract_units %}
        (au{{au.id}}, rec(idx:{{au.id}}, title:"{{au.title}}", key:"{{au.key}}")){% if not (loop.last) %},{% endif %}{% endfor %}
    }
    &
    module_abstract_unit_semester : POW((MODULES * ABSTRACT_UNITS) * SEMESTERS)
    &
    module_abstract_unit_semester = { {% for maus in module_abstract_unit_semester %}
        (mod{{maus.module.id}}, au{{maus.abstractUnit.id}}, sem{{maus .semester}}){% if not (loop.last) %},{% endif %}{% endfor %}
    }
    &
    module_abstract_unit_type : ((MODULES*ABSTRACT_UNITS)<->TYPES)
    &
    module_abstract_unit_type = { {% for maut in module_abstract_unit_type %}
        (mod{{maut.module.id}}, au{{maut.abstractUnit.id}}, {{maut.type}}){% if not (loop.last) %},{% endif %}{% endfor %}
    }
    &
    units :  POW(UNITS * struct(idx:NATURAL1, key:STRING, semesters: POW(SEMESTERS), groups:POW(GROUPS), title:STRING))
    &
    units = { {% for unit in units %}
        (unit{{unit.id}}, rec(idx:{{unit.id}}, title:"{{unit.title}}", key:"{{unit.key}}", semesters:{ {% for s in unit.semesters %}sem{{ s }}{% if not (loop.last) %},{% endif %}{% endfor %} },
            groups:{ {% for group in unit.groups %}group{{group.id}}{% if not (loop.last) %},{% endif %}{% endfor %} })){% if not (loop.last) %},{% endif %}{% endfor %}
    }
    &
    abstract_unit_unit : POW(ABSTRACT_UNITS * UNITS)
    &
    abstract_unit_unit = { {% for it in abstract_unit_unit_pairs(abstract_units) %}
     (au{{  it.abstractUnit.id }}, unit{{ it.unit.id }}){% if not (loop.last) %},{% endif %}{% endfor %}
    }
    &
    course_modules : course_names --> POW(MODULES)
    &
    course_modules = { {% for course in courses %}
        ("{{ course.key }}", { {% for it in course.modules %}mod{{ it.id }}{% if not (loop.last) %},{% endif %}{% endfor %} }){% if not (loop.last) %},{% endif %}{% endfor %}
    }
ASSERTIONS
  course_names = dom(course_module_combinations)
END
