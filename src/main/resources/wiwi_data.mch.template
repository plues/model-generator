/* Machine generated: ${new Date()} */
/* Database information: */
<% info.each { %>/*  <%= it.key %>: <%= it.value %> */
<% } %>
MACHINE wiwi_data
/*
 * Course/Major: Studiengang
 * Module: A logical grouping of teaching units, might be composed of several units that make up a module. (z.B. Grundlagen der Technischen Informatik)
 * Class: Number for a unit within a group, (z.B. Grundlagen der Technischen Informatik, Teil 1 => Info 1)
 * Semester: Number 1..6
 * Unit: Lehrveranstaltung, a teaching unit like a lecture or lab sessions, divided in groups (one of them needs to be chosen to complete the unit)
 * Group: A set of related teaching sessions associated to a teaching unit, all sessions within a group are mandatory if the group is chosen
 * Session: An actual teaching session in a room with students a teacher
 * Slot: The day of the week and the time where a session is hel
 * Rhythm: Sessions might be scheduled weekly, or every other week on odd or even weeks
 * Duration: Number of SWS per session
 */
DEFINITIONS
 "LibraryIO.def"
SEES base
SETS
    TYPES={m,e};
    MODULES={<%= modules.collect { it.name }.join(', ') %>};
    COURSES = {<%= courses.collect { it.name }.join ',\n        ' %>};
    DEPARTMENTS = {<%= departments.collect { it.name }.join ',\n        ' %>}
CONSTANTS module_frequency, units, sessions, focus_areas, department_names, course_names, course_modules, course_modules_elective_units, course_module_units
PROPERTIES
    focus_areas : POW(INTEGER*STRING)
    &
    focus_areas = {
        <%=
        focus_areas.collect { area ->
            "(${area.id} |-> \"${area.name}\")"
        }.join(',\n        ')
        %>
    }
    &
    module_frequency : MODULES +-> STRING
    &
    module_frequency= {
        <% /*
        modules.collect { module ->
            "(${module.name} |-> \"${module.frequency}\")"
        }.join(',\n        ')
        */ %>
    }
    &
    course_names : COURSES --> STRING
    &
    course_names = {
        <%=
        courses.collect { course ->
            "(${course.name} |-> \"${course.long_name}\")"
        }.join(',\n        ')
        %>
    }
    &
    course_modules : POW((COURSES*MODULES)*TYPES)
    &
    course_modules = {
        <%=
        courses_modules.collect { cm ->
            "(${cm.course.name} |-> ${cm.module.name} |-> ${cm.type})"
        }.join(',\n        ')
        %>
    }
    &
    course_modules_elective_units : POW((COURSES*MODULES)*INTEGER)
    &
    course_modules_elective_units = {
        <%=
        courses_modules.collect { cm ->
            "(${cm.course.name} |-> ${cm.module.name} |-> ${cm.elective_units})"
        }.join(',\n        ')
        %>
    }
    &
    course_module_units : POW((((COURSES*MODULES)*INTEGER)*TYPES)*INTEGER)
    &
    course_module_units = {
        <%=
        courses_modules_units.collect { cmu ->
            "(${cmu.course.name} |-> ${cmu.module.name} |-> ${cmu.unit.id} |-> ${cmu.type} |-> ${cmu.semester})"
        }.join(',\n        ')
        %>
    }
    &
    department_names : DEPARTMENTS --> STRING
    &
    department_names = {
        <%=
        departments.collect { dep ->
            "(${dep.name} |-> \"${dep.long_name}\")"
        }.join(',\n        ')
        %>
    }
    &
    sessions : POW(INTEGER*struct(duration:INTEGER, rhythm:INTEGER, slot:SLOTS))
    &
    sessions = {
        <%=
        sessions.collect { session ->
            "(${session.id}, rec(slot:${session.slot}, rhythm:${session.rhythm}, duration:${session.duration}))"
        }.join(',\n        ')
        %>
    }
    &
    units :  POW(INTEGER*struct(department:DEPARTMENTS, duration:INTEGER, groups:POW(INTEGER*struct(sessions:POW(INTEGER), title:STRING)), title:STRING))
    &
    units = {
        <%=
        units.collect { unit ->
            "(${unit.id}, rec(title:\"${unit.title}\", department:${unit.department.name}, duration:${unit.duration},     groups:{${unit.groups.collect { group -> "(${group.id}, rec(title:\"${group.title}\", sessions:{${group.sessions.collect { it.id }.join(', ')}}))"}.join(', ')}}))"
        }.join(',\n        ')
        %>
    }
END