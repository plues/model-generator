/* Machine generated: ${new Date()} */
/* Database information: */
<% info.each { %>/*  <%= it.key %>: <%= it.value %> */
<% } %>
<% // vim: set syntax=groovy : %>
MACHINE data
/* TODO:
 * Decide how to select courses for checking (major and minor pairs, major only courses and/or major and focus area)
 *  - Build all pairs ahead of time
 *  - Choose to options
 *  - Provide a faculty configuration which things can be selected by the user
 * Add an assertion that all levels with modules are leaves
 * Generate docs along with data
 */
DEFINITIONS
 "LibraryIO.def";
 SEMESTERS==1..6;
SETS
    TYPES={m,e};
    DAYS = {mon, tue, wed, thu, fri, sat, sun}
CONSTANTS
    abstract_units,
    abstract_unit_unit_semester,
    courses,
    course_names,
    course_levels,
    course_modules,
    course_module_combinations,
    course_tree_leaves,
    LEVELS,
    level_modules,
    sessions,
    units,
    modules,
    module_abstract_unit_semester
PROPERTIES
    modules : POW(NATURAL1 * struct(idx:NATURAL1, name:STRING, credit_points:NATURAL \\/ {-1}, title:STRING, pordnr:NATURAL, elective_units:NATURAL, mandatory:BOOL))
    &
    modules = {
        <%=
        modules.collect { module ->
            "(${module.id} |-> rec(idx:${module.id}, name:\"${module.name}\", credit_points:${module.credit_points}, title:\"${module.title}\", pordnr:${module.pordnr}, elective_units:${module.elective_units},  mandatory:${(module.mandatory)?'TRUE':'FALSE'}))"
        }.join(',\n        ')
        %>
    }
    &
    courses : POW(STRING*struct(idx:NATURAL1, name:STRING, long_name:STRING, degree:STRING, credit_points:NATURAL \\/ {-1}, po:NATURAL1, kzfa:STRING))
    &
    courses = {
        <%=
        courses.collect { course ->
            "(\"${course.key}\" |-> rec(idx: ${course.id}, name: \"${course.key}\", long_name:\"${course.fullName}\", credit_points:${course.credit_points}, degree:\"${course.degree}\", kzfa:\"${course.kzfa}\", po:${course.po}))"
        }.join(',\n        ')
        %>
    }
    &
    course_names : POW(STRING)
    &
    course_names = dom(courses)
    &
    course_module_combinations = {
        <%=
        course_modules_combinations.combinations.collect { course, combs ->
           "(\"${course.key}\" |-> {\n
            ${combs.collect { idx, modules -> "{${modules.collect { m -> m.id }.join(', ')}} /* ${idx} */" }.join(',\n            ')}
           })"
        }.join(',\n        ')
        %>
    }
    &
    sessions : POW(NATURAL1 * struct(duration:INTEGER, rhythm:INTEGER, dow:DAYS, slot:NATURAL1))
    &
    sessions = {
        <%=
        sessions.collect { session ->
            "(${session.id}, rec(dow:${session.day}, slot:${session.time}, rhythm:${session.rhythm}, duration:${session.duration}))"
        }.join(',\n        ')
        %>
    }
    &
    abstract_units : POW(NATURAL1 * struct(idx:NATURAL, title:STRING, key:STRING, type: TYPES))
    &
    abstract_units = {
        <%=
        abstract_units.collect { au ->
            "(${au.id}, rec(idx:${au.id}, title:\"${au.title}\", key:\"${au.key}\", type:${au.type}))"
        }.join(',\n        ')
        %>
    }
    &
    module_abstract_unit_semester : POW((dom(modules) * dom(abstract_units)) * SEMESTERS)
    &
    module_abstract_unit_semester = {
        <%= module_abstract_unit_semester.collect { maus ->
            "(${maus.module.id}, ${maus.abstract_unit.id}, ${maus.semester})"
        }.join(',\n        ')
        %>
    }
    &
    units :  POW(NATURAL1 * struct(idx:NATURAL1, key:STRING, half_semester:0..2, groups:POW(INTEGER*struct(sessions:POW(INTEGER))), title:STRING))
    &
    units = {
        <%=
        units.collect { unit ->
            "(${unit.id}, rec(idx:${unit.id}, title:\"${unit.title}\", key:\"${unit.key}\", half_semester:${unit.half_semester}, groups:{${unit.groups.collect { group -> "(${group.id}, rec(sessions:{${group.sessions.collect { it.id }.join(', ')}}))"}.join(', ')}}))"
        }.join(',\n        ')
        %>
    }
    &
    abstract_unit_unit_semester : POW((dom(abstract_units) * dom(units)) * SEMESTERS)
    &
    abstract_unit_unit_semester = {
        <%=
        abstract_unit_unit_semester.collect { auas ->
            "(${auas.abstract_unit.id}, ${auas.unit.id}, ${auas.semester})"
        }.join(',\n        ')
        %>
    }
    &
    LEVELS = {<%= levels.collect { level -> level.id}.join (', ') %>}
    &
    course_levels : dom(courses) <-> tree(struct(idx: LEVELS, art:STRING, name: STRING, tm: STRING, min_credit_points: NATURAL \\/ {-1}, max_credit_points: NATURAL \\/ {-1}, from: NATURAL \\/ {-1}, to: NATURAL \\/ {-1}))
    &
    #(<%= levels.toList().collate(10).collect { it.collect { level -> "level_${level.id}" }.join(', ') }.join(',\n        ') %>).(
    <% levels.each { level -> %>
        level_<%= level.id %> : tree(struct(idx: LEVELS, art:STRING, name: STRING, tm: STRING, min_credit_points: NATURAL \\/ {-1}, max_credit_points: NATURAL \\/ {-1},  from: NATURAL \\/ {-1}, to: NATURAL \\/ {-1}))
        &
        level_<%= level.id %> = <%if(level.children.size() >0) { %>
            const(rec(idx:${level.id}, art:"${level.art}", name:"${level.name}", tm:"${level.tm}", min_credit_points:${level.min_credit_points}, max_credit_points:${level.max_credit_points}, from:${level.min}, to:${level.max}), [<%= level.children.collect { child -> "level_${child.id}" }.join(', ') %>])<% } else { %>
            bin(rec(idx:${level.id}, art:"${level.art}", name:"${level.name}", tm:"${level.tm}", min_credit_points:${level.min_credit_points}, max_credit_points:${level.max_credit_points}, from:${level.min}, to:${level.max}))
        <% } %><% if (level != levels.last()) { %> & <% } %><% } %>
      &
      course_levels = {
        <%= courses.collect { course -> course.levels.collect { level -> "(\"${course.key}\", level_${level.id})"}.join(', ') }.join(',\n        ') %>
      }
    )
    &
    course_tree_leaves : POW((dom(courses)*LEVELS)*POW(seq(INTEGER)))
    &
    !(cc, tt).( cc : dom(courses) & tt : course_levels[{cc}] =>
        course_tree_leaves(cc, top(tt)'idx) = {xx | xx : dom(tt) & sizet(subtree(tt, xx)) = 1}
    )
    &
    /*
     * Maps from level ID to the set of modules associated with that level (leaf)
     */
    level_modules : LEVELS <-> dom(modules)
    &
    level_modules = {
        <%= levels.findAll { level -> level.modules.size() > 0 }.collect { level ->
             level.modules.collect { module -> "(${level.id} |-> ${module.id})" }.join(", ")
        }.join(',\n        ') %>
    }
    &
    course_modules : dom(courses) --> POW(dom(modules))
    &
    course_modules = {
        <% courses.each { course -> %>
        ("<%= course.key %>", {<%= course.modules.collect { it.id }.join(" ,") %>})<% if(course != courses.last()) { %>,<% } %><% } %>
    }

END
